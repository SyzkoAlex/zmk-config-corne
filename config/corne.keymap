/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    flavor = "tap-unless-interrupted";
    tapping-term-ms = <300>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        mcr_copy: mcr_copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "MCR_COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&trans   &kp Q               &kp W        &kp E            &kp R         &kp T        &kp Y      &kp U            &kp I             &kp O        &kp P                  &trans
&kp TAB  &hrm RIGHT_SHIFT A  &hrm LGUI S  &hrm LEFT_ALT D  &hrm LCTRL F  &kp G        &kp H      &hrm RCTRL J     &hrm RIGHT_ALT K  &hrm RGUI L  &hrm RIGHT_SHIFT SEMI  &trans
&trans   &kp Z               &kp X        &kp C            &kp V         &kp B        &kp N      &kp M            &kp COMMA         &kp DOT      &kp FSLH               &trans
                                          &trans           &lt 1 ESC     &kp SPACE    &kp ENTER  &lt 2 BACKSPACE  &trans
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans                     &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP  &trans    &trans    &kp PAGE_UP     &kp UP_ARROW      &trans            &trans   &trans
&trans  &hrm LG(LEFT_SHIFT) LG(Z)  &kp LG(X)          &kp LG(C)   &kp LG(V)        &trans    &trans    &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW   &kp SQT  &trans
&trans  &trans                     &trans             &kp LC(G)   &kp LA(ENTER)    &trans    &trans    &kp PAGE_DOWN   &kp LS(NUMBER_6)  &kp LS(NUMBER_7)  &trans   &trans
                                                      &trans      &trans           &trans    &kp CLCK  &mo 3           &kp RIGHT_ALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans     &kp AT                &kp DOLLAR  &kp HASH               &trans      &trans       &kp LEFT_BRACKET  &kp UNDER      &kp RIGHT_BRACKET  &trans           &trans
&trans  &kp GRAVE  &kp LESS_THAN         &kp EQUAL   &kp GREATER_THAN       &kp PLUS    &kp PERCENT  &kp LEFT_BRACE    &kp SEMICOLON  &kp RIGHT_BRACE    &kp EXCLAMATION  &trans
&trans  &kp ASTRK  &kp LEFT_PARENTHESIS  &kp MINUS   &kp RIGHT_PARENTHESIS  &trans      &trans       &kp PIPE          &kp TILDE      &kp AMPERSAND      &trans           &trans
                                         &trans      &mo 3                  &trans      &trans       &trans            &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans          &kp F1        &kp F2            &kp F3  &kp F10    &trans        &kp NUMBER_1  &kp NUMBER_2             &kp NUMBER_3             &trans           &bt BT_CLR_ALL
&trans  &kp LEFT_SHIFT  &hrm LGUI F4  &hrm LEFT_ALT F5  &kp F6  &kp F11    &kp NUMBER_0  &kp NUMBER_4  &hrm RIGHT_ALT NUMBER_5  &hrm RIGHT_GUI NUMBER_6  &kp RIGHT_SHIFT  &bt BT_SEL 0
&trans  &trans          &kp F8        &kp F8            &kp F9  &kp F12    &trans        &kp NUMBER_7  &kp NUMBER_8             &kp NUMBER_9             &trans           &bt BT_SEL 1
                                      &trans            &trans  &trans     &trans        &trans        &trans
            >;
        };
    };
};
